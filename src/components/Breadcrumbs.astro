---
export type Props = {
  className?: string;
};

const { className } = Astro.props;

// Remove current url path and remove trailing slash if exists
const currentUrlPath = Astro.url.pathname.replace(/\/+$/, "");

// Get url array from path
// eg: /tags/tailwindcss => ['tags', 'tailwindcss']
const breadcrumbList = currentUrlPath.split("/").slice(1);

// if breadcrumb is Home > Posts > 1 <etc>
// replace Posts with Posts (page number)
breadcrumbList[0] === "posts" &&
  breadcrumbList.splice(0, 2, `Posts (page ${breadcrumbList[1] || 1})`);
---

<nav class:list={["breadcrumb", className]} aria-label="breadcrumb">
  <ul>
    <li>
      <a href="/">Home</a>
      <span aria-hidden="true" class="separator">/</span>
    </li>
    {
      breadcrumbList.map((breadcrumb, index) =>
        index + 1 === breadcrumbList.length ? (
          <li>
            <span
              class={`${index > 0 ? "lowercase" : "capitalize"}`}
              aria-current="page"
            >
              {/* make the last part lowercase in Home > Tags > some-tag */}
              {breadcrumb}
            </span>
          </li>
        ) : (
          <li>
            <a href={`/${breadcrumb}`}>{breadcrumb}</a>
            <span aria-hidden="true" class="separator">
              /
            </span>
          </li>
        )
      )
    }
  </ul>
</nav>

<style lang="scss">
  .breadcrumb {
    font-size: var(--cmm-font-size-md);
    color: var(--cmm-color-font-subtle);

    ul {
      display: flex;
      align-items: center;
    }

    ul li {
      display: flex;
      align-items: center;
      font-weight: var(--cmm-font-weight-medium);
    }

    a {
      color: var(--cmm-color-font-base);

      &:hover {
        text-decoration: underline;
      }
    }

    .separator {
      display: block;
      font-weight: var(--cmm-font-weight-semibold);
      margin-inline: 0.75em;
      font-size: 0.9em;
    }
  }
</style>
